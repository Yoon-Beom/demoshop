<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.docmall.basic.member.MemberMapper">
    <!--
        ============================
        [ MyBatis 매퍼 XML 설명 ]
        ============================
        - 이 파일은 MemberMapper 인터페이스와 매핑되는 SQL 쿼리를 정의합니다.
        - namespace는 MemberMapper 인터페이스의 전체 경로(패키지명 포함)와 일치시켜야 합니다.
          (예: com.docmall.basic.member.MemberMapper)
        - 공식 문서: https://mybatis.org/mybatis-3/ko/sqlmap-xml.html
    -->

    <!--
        ============================
        [ 아이디 중복 체크 쿼리 ]
        ============================
        - id: "idCheck" → MemberMapper 인터페이스의 idCheck 메서드와 연결됨
        - parameterType: String → 파라미터로 String(아이디)을 받음
        - resultType: String → 결과로 String(아이디) 반환
        - #{mbsp_id} → 파라미터 바인딩(입력값이 mbsp_id로 들어옴)
        - 사용 예시:
            String id = memberMapper.idCheck("testid");
        - 반환값: 해당 아이디가 존재하면 아이디(String), 없으면 null
    -->
    <select id="idCheck" parameterType="String" resultType="String">
        select 
            mbsp_id 
        from 
            mbsp_tbl 
        where 
            mbsp_id = #{mbsp_id}
    </select>
    
    <!--
        ============================
        [ 회원 가입(INSERT) 쿼리 ]
        ============================
        - id: "join" → MemberMapper 인터페이스의 join 메서드와 연결됨
        - parameterType: com.docmall.basic.member.MemberVO → 회원 정보 객체를 파라미터로 받음
        - #{필드명} → MemberVO 객체의 필드 값이 바인딩됨
        - 사용 예시:
            memberMapper.join(memberVO);
        - 반환값: insert된 행 수(int, MyBatis 기본 반환)
    -->
    <insert id="join" parameterType="com.docmall.basic.member.MemberVO">
    
        insert into 
            mbsp_tbl
                (mbsp_id, mbsp_name, mbsp_email,
                mbsp_password, mbsp_zipcode, mbsp_addr,
                mbsp_deaddr, mbsp_phone, mbsp_nick,
                mbsp_receive)
        values
            (#{mbsp_id}, #{mbsp_name}, #{mbsp_email}, #{mbsp_password}, #{mbsp_zipcode}, #{mbsp_addr}, #{mbsp_deaddr}, #{mbsp_phone}, #{mbsp_nick}, #{mbsp_receive})
            
    </insert>
    
	<!--
	    ============================
	    [ 회원 로그인/조회 쿼리 ]
	    ============================
	    - id="login": 로그인 시, 아이디로 회원 전체 정보를 조회
	    - id="modify": 회원정보 수정 화면 진입 시, 아이디로 회원 전체 정보를 조회
	    - parameterType="String": mbsp_id(회원 아이디)를 파라미터로 받음
	    - resultType="com.docmall.basic.member.MemberVO": 결과를 MemberVO 객체로 매핑
	-->
	<select id="login" parameterType="String" resultType="com.docmall.basic.member.MemberVO">
	    select 
	        mbsp_id, mbsp_name, mbsp_email,
	        mbsp_password, mbsp_zipcode, mbsp_addr,
	        mbsp_deaddr, mbsp_phone, mbsp_nick,
	        mbsp_receive, mbsp_point, mbsp_lastlogin,
	        mbsp_datesub, mbsp_updatedate
	    from 
	        mbsp_tbl 
	    where 
	        mbsp_id = #{mbsp_id}
	</select>
	
	<select id="modify" parameterType="String" resultType="com.docmall.basic.member.MemberVO">
	    select 
	        mbsp_id, mbsp_name, mbsp_email,
	        mbsp_password, mbsp_zipcode, mbsp_addr,
	        mbsp_deaddr, mbsp_phone, mbsp_nick,
	        mbsp_receive, mbsp_point, mbsp_lastlogin,
	        mbsp_datesub, mbsp_updatedate
	    from 
	        mbsp_tbl 
	    where 
	        mbsp_id = #{mbsp_id}
	</select>
	
	<!--
	    ============================
	    [ 회원정보 수정(UPDATE) 쿼리 ]
	    ============================
	    - id="modify_save": 회원정보 수정 저장
	    - parameterType="com.docmall.basic.member.MemberVO": 수정할 회원 정보 객체
	    - 수정일은 now()로 현재 시각 자동 저장
	-->
	<update id="modify_save" parameterType="com.docmall.basic.member.MemberVO">
	    update 
	        mbsp_tbl
	    set
	        mbsp_name = #{mbsp_name},
	        mbsp_email = #{mbsp_email},
	        mbsp_zipcode = #{mbsp_zipcode},
	        mbsp_addr = #{mbsp_addr}, 
	        mbsp_deaddr = #{mbsp_deaddr},
	        mbsp_phone = #{mbsp_phone},
	        mbsp_nick = #{mbsp_nick},
	        mbsp_updatedate = now()
	    where 
	        mbsp_id = #{mbsp_id}
	</update>
	
	<!--
	    ============================
	    [ 비밀번호 변경(UPDATE) 쿼리 ]
	    ============================
	    - id="pwchange": 비밀번호 변경
	    - parameterType="Map": mbsp_id(회원 아이디), mbsp_password(새 비밀번호) 전달
	-->
	<update id="pwchange" parameterType="Map">
	    update 
	        mbsp_tbl 
	    set 
	        mbsp_password = #{mbsp_password}
	    where 
	        mbsp_id = #{mbsp_id}
	</update>
	
	<!--
	    ============================
	    [ 아이디 찾기 쿼리 ]
	    ============================
	    - id: "idsearch"
	    - parameterType: Map (mbsp_name, mbsp_email을 Map으로 전달)
	    - resultType: String (아이디 반환)
	    - 사용 예시: 
	        Map<String, String> param = new HashMap<>();
	        param.put("mbsp_name", "홍길동");
	        param.put("mbsp_email", "hong@test.com");
	        String id = memberMapper.idsearch(param);
	-->
	<select id="idsearch" parameterType="Map" resultType="String">
	    select 
	        mbsp_id 
	    from 
	        mbsp_tbl
	    where 
	        mbsp_name = #{mbsp_name}
	        and mbsp_email = #{mbsp_email}
	</select>
	
	<!--
	    ============================
	    [ 임시 비밀번호 발급 전 이메일/아이디 확인 쿼리 ]
	    ============================
	    - id: "pwtemp_confirm"
	    - parameterType: Map (mbsp_id, mbsp_email을 Map으로 전달)
	    - resultType: String (이메일 반환)
	    - 사용 예시:
	        Map<String, String> param = new HashMap<>();
	        param.put("mbsp_id", "testid");
	        param.put("mbsp_email", "hong@test.com");
	        String email = memberMapper.pwtemp_confirm(param);
	    - 반환값: 해당 아이디와 이메일이 일치하면 이메일(String), 없으면 null
	-->
	<select id="pwtemp_confirm" parameterType="Map" resultType="String">
	    select 
	        mbsp_email 
	    from 
	        mbsp_tbl
	    where 
	        mbsp_id = #{mbsp_id}
	        and mbsp_email = #{mbsp_email}
	</select>

</mapper>
